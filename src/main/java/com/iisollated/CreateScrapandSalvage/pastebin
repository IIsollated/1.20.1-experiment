package com.iisollated.CreateScrapandSalvage.block.entity.client;

import net.minecraft.core.BlockPos;
import net.minecraft.world.level.block.SimpleWaterloggedBlock;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import software.bernie.geckolib.animatable.GeoBlockEntity;
import software.bernie.geckolib.core.animatable.GeoAnimatable;
import software.bernie.geckolib.core.animatable.instance.AnimatableInstanceCache;
import software.bernie.geckolib.core.animatable.instance.SingletonAnimatableInstanceCache;
import software.bernie.geckolib.core.animation.*;
import software.bernie.geckolib.core.object.PlayState;
import software.bernie.geckolib.util.RenderUtils;

import java.util.UUID;

import static com.iisollated.CreateScrapandSalvage.block.custom.GimmickBlock.chestState;

public class GimmickBlock extends BlockEntity implements GeoBlockEntity, SimpleWaterloggedBlock {
    private AnimatableInstanceCache cache = new SingletonAnimatableInstanceCache(this);

    private UUID uuid;

    public GimmickBlock(BlockPos pPos, BlockState pBlockState) {
        super(ModBlockEntities.GIMMICK_BLOCK.get(), pPos, pBlockState);
        this.uuid = UUID.randomUUID();
    }

    public UUID getUUID() {
        return uuid;
    }

    @Override
    public void registerControllers(AnimatableManager.ControllerRegistrar controllers) {
        controllers.add(new AnimationController<>(this, "controller", 0, this::predicate));
    }

    private <T extends GeoAnimatable> PlayState predicate(AnimationState<T> tAnimationState) {
        if (!chestState) {
            tAnimationState.getController().setAnimationSpeed(0.6);
            tAnimationState.getController().setAnimation(RawAnimation.begin().then("gimmick.open", Animation.LoopType.HOLD_ON_LAST_FRAME));
        }
        if (chestState) {
            tAnimationState.getController().setAnimation(RawAnimation.begin().then("gimmick.closed", Animation.LoopType.LOOP));
        }
        return PlayState.CONTINUE;

    }

    @Override
    public AnimatableInstanceCache getAnimatableInstanceCache() {
        return cache;
    }

    @Override
    public double getTick(Object blockEntity) {
        return RenderUtils.getCurrentTick();
    }
}